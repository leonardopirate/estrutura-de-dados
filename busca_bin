def busca_binaria(seq, procurado):
    "Retornar o índice onde o elemento deveriar ser inserido em lista ordenada. Param procurado: elemento a ser procurado. Seq: sequencia a ser pesquisada. Return: int. "
    "Rodando em O(n) em tempo e O(1) em espaço." 
    
    final = len(seq) 
    inicio = 0
    meio = final // 2
    "esquerda / direita"    
    if len(seq) > 0:
        while final > inicio:
            if procurado <= seq[meio]:
                final = meio
            else:
                inicio = meio + 1
            meio = (inicio + final) // 2
    return inicio

import unittest

class BuscaBinariaTestes(unittest.TestCase):
    def teste_lista_vazia(self):
        self.assertEqual(0, busca_binaria([], 1))
        self.assertEqual(0, busca_binaria([], 2))
        self.assertEqual(0, busca_binaria([], 3))

    def teste_lista_unitaria(self):
        self.assertEqual(0, busca_binaria([1], 0))
        self.assertEqual(0, busca_binaria([1], 1))
        self.assertEqual(1, busca_binaria([1], 2))
        self.assertEqual(1, busca_binaria([1], 3))
        self.assertEqual(1, busca_binaria([1], 4))

    def teste_lista_nao_unitaria(self):
        lista = list(range(10))
        self.assertEqual(0, busca_binaria(lista, -2))
        self.assertEqual(0, busca_binaria(lista, -1))
        for i in lista:
            self.assertEqual(i, busca_binaria(lista, i))
        self.assertEqual(10, busca_binaria(lista, 10))
        self.assertEqual(10, busca_binaria(lista, 11))
        self.assertEqual(10, busca_binaria(lista, 12))

    def teste_lista_elementos_repetidos(self):
        lista = [1, 1, 1, 2, 2, 2]
        self.assertEqual(0, busca_binaria(lista, 1))
        self.assertEqual(3, busca_binaria(lista, 2))
if __name__ == '__main__':
    unittest.main()
